require 'rbbt/util/open'
require 'rbbt/sources/polysearch'
require 'rbbt/sources/pubmed'
require 'rbbt/sources/organism'

# Find pmids for the genes. Gene list is passed as global variable $genes. If
# not present, they are read from STDIN
rule (/pmids\//) do |t|

  # Read genes from STDIN if not in $genes
  if $genes.nil? 
    $genes = []
    STDIN.each_line{|l| $genes << l.chomp.strip}
  end

  pmids = Organism.gene_literature('human').values_at(*$genes).compact.flatten.uniq
  
  Open.write(t.name, pmids.join("\n"))
end

# Download the abstracts and join them in one meta-document
rule (/metadoc\//) => lambda{|name| name.sub(/metadoc/, 'pmids') } do |t|
  pmids = Open.read(t.prerequisites.first).split

  articles = PubMed.get_article(pmids)

  metadoc = articles.collect{|pmid, article|
    text = article.text
  }.join("\n")
 
  Open.write(t.name, metadoc)
end

# Parse the meta-document for disease names
rule (/diseases\//) => lambda{|name| name.sub(/diseases/, 'metadoc') } do |t|
  metadoc = Open.read(t.prerequisites.first)

  disease_count = {}
  Polysearch.match(metadoc, ['disease']).values.flatten.each{|disease|
    disease_count[disease] ||= 0
    disease_count[disease] += 1
  }
  
  Open.write(t.name, disease_count.collect{|disease, count| "#{ disease }\t#{count}"}.join("\n"))
end

