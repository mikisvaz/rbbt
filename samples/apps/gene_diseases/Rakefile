require 'rubygems'
require 'rbbt/util/rake'
require 'rbbt/sources/polysearch'
require 'rbbt/sources/pubmed'
require 'rbbt/sources/organism'

# Include the step_def method to simplify Pipelines
include Rake::Pipeline

desc "Translate gene ids to Entrez"
rule step_def(:entrez) do |t|
  genes  = STDIN.read.split("\n").collect{|l| l.chomp.strip }
 
  # index  = Organism.id_index('human')  
  #entrez = index.values_at(*genes).compact.flatten.uniq
  entrez = genes


  outfile(t) do |file|
    file.write entrez.join("\n")
  end
end

desc "Load Pubmed IDs for genes in the list"
rule step_def(:pmids) do |t|
  genes = infile(t) do |file|
    file.read.split
  end

  pmids = Organism.gene_literature('human').values_at(*genes).compact.flatten.uniq
  
  outfile(t) do |file|
    file.write pmids.join("\n")
  end
end

desc "Download article abstracts and merge them into a meta-document"
rule step_def(:metadoc) do |t|
  pmids = infile(t) do |file|
    file.read.split
  end

  articles = PubMed.get_article(pmids)

  metadoc = articles.collect{|pmid, article|
    article.text
  }.join("\n")
  
  outfile(t) do |file|
    file.write metadoc
  end
end

desc "Find disease names in meta-document"
rule step_def(:diseases) do |t|
  metadoc = infile(t) do |file|
    file.read
  end

  disease_count = {}
  Polysearch.match(metadoc, ['disease']).values.flatten.each{|disease|
    disease_count[disease] ||= 0
    disease_count[disease] += 1
  }

  outfile(t) do |file|
    disease_count.each{|disease, count| 
      file.puts "#{ disease }\t#{count}"
    }
  end
end
