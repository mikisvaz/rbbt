#!/usr/bin/ruby

require 'rubygems'
require 'rake'


require 'simpleconsole'

begin
  require 'rbbt'
rescue Rbbt::NoConfig
  $noconfig = true
end

TASKS= %w(organisms ner norm classifier biocreative entrez go wordlists polysearch abner banner crf++)

$USAGE =<<EOT
#{__FILE__} <action> [<subaction>] [--update] [--organism <org>]

  actions:

    * configure:   Set paths for data, cache, and tmp directories

    * prepare:
      
      Basic subactions:
      
      * organisms:     Install processing scripts to process organisms
      * ner:           Install processing scripts for Named Entity Recognition
      * norm:          Install processing scripts for Gene Mention Normalization
      * classifier:    Install processing scripts for Classification
      
      * biocreative:   Download and train and test data from BioCreative
      * entrez:        Download and install data from Entrez
      * go:            Download and install data from The Gene Ontology
      * wordlists:     Install word lists
      * polysearch:    Download and install Polysearch dictionaries

      * abner:         Download and install Abner NER system:      http://pages.cs.wisc.edu/~bsettles/abner/
      * banner:        Download and install Banner NER system:     http://sourceforge.net/projects/banner/
      * crf++:         Download and install CRF++ a CRF framework: http://crfpp.sourceforge.net/

      Subactions grouped by task:

      * identifiers:  entrez, organisms
      * rner:         entrez, organisms, biocreative, ner, crf++
      * java_ner:     entrez, organisms, abner, banner
      * norm: entrez  organisms, biocreative, crf++, norm, polysearch
      * bow:          organisms, wordlists
      * classifier:   organisms, wordlists, classifier, go
      * all:          #{TASKS.join(", ")}

    * install: 
      * organisms:      Gather organisms data
      * ner:            Build Named Entity Recognition Models. Mention Normalization needs no training.
      * classification: Build Function/Process Classifiers

      --update:         Rebuild models or reprocess organism data even if present. You may want to purge the cache 
                        to be up to date with the data in the internet.

      --organism:       Gather data only for that particular organism. The organism must be specified by the 
                        keyword. Use '#{__FILE__} organisms' to see find the keywords.

    * purge_cache: Clean the non-persistent cache, which holds general things
        downloaded using Open.read, like organism identifiers downloaded from
        BioMart. The persistent cache, which hold pubmed articles or entrez gene
        descriptions, is not cleaned, as these are not likely to change

    * organisms: Show a list of all organisms along with their identifier in the system

                
                   
EOT

class Controller < SimpleConsole::Controller

  params :bool => {:u => :update},
         :string => {:o => :organism}

  def organisms
  end


  def default
    render :action => :usage
  end

  def help
    render :action => :usage
  end

  def install
    raise "Run #{__FILE__} configure first to configure rbbt" if $noconfig

    case params[:id]
    when "organisms"
      @location = File.join(Rbbt.datadir,'organisms')
    when "ner"
      @location = File.join(Rbbt.datadir,'ner')
    when "classifier"
      @location = File.join(Rbbt.datadir,'classifier')
    else
      redirect_to :action => :help, :id => :update
    end

    $force = true if params[:update]
    $org = params[:organism] if params[:organism]

  end

  def prepare
    raise "Run #{__FILE__} configure first to configure rbbt" if $noconfig
    case params[:id]
    when "identifiers"
      require 'rbbt/sources/organism'
      require 'rbbt/sources/entrez'
      @tasks = %w(entrez organisms)
    when "rner"
      require 'rbbt/ner/rner'
      require 'rbbt/sources/entrez'
      @tasks = %w(entrez organisms biocreative ner crf++)
    when "java_ner"
      require 'rjb'
      @tasks = %w(entrez organisms abner banner)
    when "norm"
      require 'rbbt/ner/rner'
      require 'rbbt/ner/rnorm'
      require 'rbbt/ner/regexpNER'
      require 'rbbt/sources/entrez'
      @tasks = %w(entrez organisms biocreative crf++ norm polysearch)
    when "bow"
      require 'rbbt/bow/bow'
      require 'rbbt/bow/dictionary'
      @tasks = %w(organisms wordlists)
    when "classifier"
      require 'rbbt/bow/bow'
      require 'rbbt/bow/dictionary'
      require 'rbbt/bow/classifier'
      @tasks = %w(organisms wordlists classifier go)
    when "all"
      @tasks = TASKS
    when nil
      redirect_to :action => :help, :id => :install
    else
      redirect_to :action => :help, :id => :install if ! TASKS.include? params[:id]
      @tasks = [params[:id]]
    end

    $force = true if params[:update]
    $org = params[:organism] if params[:organism]

  end

  def configure
  end

  def purge_cache
  end

end

class View < SimpleConsole::View
  def usage
    puts $USAGE
  end

  def organisms
      require 'rbbt/sources/organism'
      all = Organism.all(false)
      installed = Organism.all

      all.each{|org|
          puts "#{Organism.name(org)}: #{org} #{installed.include?(org) ? "(installed)" : ""}"
      }
  end


  def prepare
    load File.join(Rbbt.rootdir, 'tasks/install.rake')

    @tasks.each{|t|
      puts "Invoking #{ t }"
      Rake::Task[t].invoke
    }
  end

  def install

    puts "Changing directory to #{@location}"
    chdir @location

    load "./Rakefile"

    Rake::Task['default'].invoke
  end


  def configure

    defaultdir = File.join(ENV['HOME'],'rbbt')

    cachedir   = File.join(defaultdir, 'cache')
    tmpdir   = File.join(defaultdir, 'tmp')
    datadir   = File.join(defaultdir, 'data')

    puts "Please indicate where you wish to place the data directories"
    puts
    
    puts
    puts "* Cache Directory: This directory will hold downloads, from PubMed, 
  Entrez and other, for local store. It might grow considerably."
    print "[#{ cachedir }]? "
    input = STDIN.gets
    cachedir = input if input =~ /\w/

    puts
    puts "* Tmp Directory: Temporary files." 
    print "[#{ tmpdir }]? "
    input = STDIN.gets
    tmpdir = input if input =~ /\w/

    puts
    puts "* Data Directory: Holds data from organisms, databases, third party software, etc."
    print "[#{ datadir }]? "
    input = STDIN.gets
    datadir = input if input =~ /\w/



    fout = File.open(File.join(ENV['HOME'], '.rbbt'),'w')
    fout.puts "cachedir: #{cachedir}" 
    fout.puts "tmpdir: #{tmpdir}" 
    fout.puts "datadir: #{datadir}" 
    fout.close

  end

  def purge_cache
    FileUtils.rm Dir.glob(File.join(Rbbt.cachedir,'open-remote','*'))
  end

end

SimpleConsole::Application.run(ARGV, Controller, View)


