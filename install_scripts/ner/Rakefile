require 'rbbt/sources/organism'
require 'rbbt/sources/biocreative'
require 'rbbt/ner/rner'

require 'progress-monitor'


$type = ENV['type'] || 'rner'

#{{{ FEATURES

def BC2GM_features(dataset, outfile)
  data = Biocreative.BC2GM(dataset)

  fout = File.open(outfile,'w')
  parser   = NERFeatures.new
  
  Progress.monitor("CRFPP Features BC2GM #{ dataset }")
  data.each{|code, info|
    text = info[:text]
    mentions = info[:mentions]

    features = parser.tagged_features(text,mentions)

    features.each{|feat|
      fout.puts feat.join(" ")
    }
    fout.puts
  }
  fout.close
end

def BC2GN_features(dataset, outfile)
  data = {}
  Dir.glob(File.join(Rbbt.datadir,'biocreative','BC2GN',dataset,'*.txt')).each{|f|
    code = File.basename(f).sub(/.txt/,'')
    data[code] = {}
    data[code][:text] = Open.read(f)
  }
  Open.read(File.join(Rbbt.datadir,'biocreative','BC2GN',dataset,'genelist')).each_line{|l|
   code, gene, mention = l.chomp.split(/\t/)
   data[code][:mentions] ||= []
   data[code][:mentions] << mention
  }

  fout = File.open(outfile,'w')
  parser   = NERFeatures.new

  Progress.monitor("CRFPP Features BC2GN #{ dataset }")
  data.each{|code, info|
    text = info[:text]
    mentions = info[:mentions]
    next if mentions.nil?

    features = parser.tagged_features(text,mentions)

    features.each{|feat|
      fout.puts feat.join(" ")
    }
    fout.puts
  }
  fout.close
end

def org_features(org, outfile)
  names = Organism.lexicon(org).collect{|code, names|
    names
  }.flatten

  fout = File.open(outfile,'w')
  parser   = NERFeatures.new

  Progress.monitor("CRFPP Features #{ org }")
  names.each{|name|
    features = parser.text_features(name, true)
    features.each{|feat|
      fout.puts feat.join(" ")
    }
    fout.puts
  }
  fout.close


end

file "data/BC2GM_train.features" do |t|
  BC2GM_features(:train, 'data/BC2GM_train.features')
end

file "data/BC2GM_test.features" do |t|
  BC2GM_features(:test, 'data/BC2GM_test.features')
end
file "data/BC2GN_Train.features" do |t|
  BC2GN_features('Train', 'data/BC2GN_Train.features')
end

file "data/BC2GN_Test.features" do |t|
  BC2GN_features('Test', 'data/BC2GN_Test.features')
end


file "data/BC2GM.features" => ['data/BC2GM_train.features','data/BC2GM_test.features'] do |t|
  Open.write('data/BC2GM.features',Open.read('data/BC2GM_train.features'))
  Open.append('data/BC2GM.features',Open.read('data/BC2GM_test.features'))
end

file "data/BC2GN.features" => ['data/BC2GN_Train.features','data/BC2GN_Test.features'] do |t|
  Open.write('data/BC2GN.features',Open.read('data/BC2GN_Train.features'))
  Open.append('data/BC2GN.features',Open.read('data/BC2GN_Test.features'))
end


file "data/BC2.features" => ['data/BC2GN.features','data/BC2GM.features'] do |t|
  Open.write('data/BC2.features',Open.read('data/BC2GM.features'))
  Open.append('data/BC2.features',Open.read('data/BC2GN.features'))
end

file "data/train.features" => [
  #'data/BC2GN.features',
  'data/BC2GM_train.features'
  ] do |t|
  t.prerequisites.each_with_index{|f,i|
    if i == 0
      Open.write('data/train.features',Open.read(f))
    else
      Open.append('data/train.features',Open.read(f))
    end
  }
end

rule (/data\/(.*).features/) =>  ['data/BC2.features'] do |t|
  org = File.basename(t.name).sub(/.features$/,'')
  org_features(org, t.name)
  Open.append(t.name, Open.read('data/BC2.features'))
end



#{{{ MODEL
rule (/model\/(.*)/) => lambda {|t| t.sub(/model/,'data') + '.features'} do |t|
  parser = NERFeatures.new 
  parser.train( t.name.sub(/model/,'data') + '.features', t.name)
end

task 'clean' do
  FileUtils.rm Dir.glob("data/*")
  FileUtils.rm Dir.glob("model/*")
  FileUtils.rm Dir.glob("results/*")

end

task 'all' do
  Organism.all.each{|org|
    Rake::Task["model/#{ org }"].invoke
  }
end

task 'default' do
  if $org
    FileUtils.rm Dir.glob("**/#{$org}.*") if $force
    Rake::Task["model/#{$org}"].invoke
  else
    Rake::Task['clean'].invoke if $force
    Rake::Task['all'].invoke
  end
end

#{{{ EVALUATE


def find(model, type, outfile)
  ner = Organism.ner(:human,type,:model => model)
 
  data = Biocreative.BC2GM(:test)

  fout = File.open(outfile,'w')

  Progress.monitor("Test")
  data.each{|code,info|
    text = info[:text]
    mentions = ner.extract(text)

    mentions.each{|mention|
      positions = Biocreative.position(text,mention)
      positions.each{|pos|
        fout.puts "#{code}|#{pos[0]} #{pos[1]}|#{mention}"
      }
    }
  }

end



rule (/results\/test$/)  do |t|
  org = File.basename(t.name)

  if $type == 'rner'
    Rake::Task['model/train'].invoke
  end
  find('model/train',$type,t.name)
end

rule (/results\/test.eval$/) => ['results/test'] do |t|
  Biocreative.BC2GM_eval('results/test',:test, 'results/test.eval')
end
